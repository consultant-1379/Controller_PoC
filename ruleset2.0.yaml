#
# COPYRIGHT Ericsson 2021
#
#
#
# The copyright to the computer program(s) herein is the property of
#
# Ericsson Inc. The programs may be used and/or copied only with written
#
# permission from Ericsson Inc. or in accordance with the terms and
#
# conditions stipulated in the agreement/contract under which the
#
# program(s) have been supplied.
#

modelVersion: 2.0

description: "Ericsson Java Spring Boot Microservice Chassis"

# See image catalog: https://confluence.lmera.ericsson.se/display/ACD/ADP+CICD+Docker+Image+Catalog
docker-images:
  - adp-asciidoc-builder: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/bob-asciidocbuilder:${env.ASCII_DOC_BUILDER_TAG}
  - adp-doc-builder: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/bob-docbuilder:${env.DOC_BUILDER_TAG}
  - adp-helm-dr-check: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/common-library-adp-helm-dr-check:${env.HELM_DR_CHECK_TAG}
  - image-dr-check: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/adp-image-dr-check:latest
  - adp-helm-kubectl: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/bob-py3kubehelmbuilder:${env.HELM_KUBECTL_TAG}
  - adp-maven-builder: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/bob-java11mvnbuilder:${env.MVN_BUILDER_TAG}
  - adp-release-auto: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/bob-adp-release-auto:${env.RELEASE_AUTO_TAG}
  - elib-make-subpath: armdocker.rnd.ericsson.se/proj-eric
  - elib-make-utilities: ${elib-make-subpath}-oss-drop/eric-elib/elib_makeutilities:${env.ELIB_MAKE_UTILITIES_TAG}
  - zally-client: armdocker.rnd.ericsson.se/proj-cicd/sandbox/zally/zally-client:${env.ZALLY_CLIENT_TAG}

import:
  common: common-properties.yaml

# List of constants
properties:
  - image-registry-path: armdocker.rnd.ericsson.se/proj-eric-oss
  - image-secret: armdocker
  - image-dev-repopath: proj-datacalc-poc-controller-dev
  - image-ci-repopath: proj-datacalc-poc-controller-ci-internal
  - image-drop-repopath: proj-datacalc-poc-controller-drop
  - image-full-name: ${image-drop-repopath}/${common.docker-image-name}

  # Helm Chart name must follow the pattern: eric-[a-z0-9]{1,5}-[a-z0-9-]{1,30}
  - helm-chart-repo-server-path: https://arm.seli.gic.ericsson.se/artifactory/proj-eric-oss
  - helm-chart-dev-repopath: proj-datacalc-controller-poc-dev-helm
  - helm-chart-ci-repopath: proj-datacalc-controller-poc-ci-internal-helm
  - helm-chart-drop-repo: ${helm-chart-repo-server-path}-drop-helm

  # Functional ID for your Team or CI group to push to Gerrit repo
  - git-user: lciadm100
  - git-repo-path: OSS/cENIQ-CR-Parent/Controller_PoC
  - git-repo-url: ssh://${git-user}@gerrit.ericsson.se:29418/${git-repo-path}
  - git-repo: https://gerrit.ericsson.se/#/admin/projects/${git-repo-path}

  - enabled-helm-design-rules: "-DhelmDesignRule.config.drHc011=enable -DhelmDesignRule.config.DR-D1120-045-AD=enable"
  - enabled-image-design-rules: "-DimageDesignRule.config.DR-D470203-020=disable -DimageDesignRule.config.DR-D470203-030=disable
                                 -DimageDesignRule.config.DR-D470203-040-A=disable -DimageDesignRule.config.DR-D470203-041-A=disable
                                 -DimageDesignRule.config.DR-D470203-050-A=disable"

# Import environment variables (For example: Jenkins parameters)
env:
  - GERRIT_PATCHSET_REVISION (default=HEAD)
  - HOME
  - MAVEN_CLI_OPTS (default=-Duser.home=${env.HOME} -B)
  - MAVEN_OPTS (default=-Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn)
  - PWD
  - RELEASE (default=false)
  - USER (default=local)
  - DOCKER_NETWORK (default=--network host)

  # Kubernetes
  - COLLECT_LOGS_SCRIPT_LOCATION (default="https://arm.sero.gic.ericsson.se/artifactory/proj-ADP_GS_Support_FTP-generic-local/collect_ADP_logs")
  - COLLECT_LOGS_SCRIPT_FILE_NAME (default="collect_ADP_logs.sh")
  - COLLECT_LOGS_SINCE_RELATIVE_TIME (default="2h")
  - COLLECT_LOGS_DIR (default=./k8s-logs)
  - ENABLE_HELM_V3 (default=true)
  - HELM_INSTALL_TIMEOUT (default=5m0s)
  - HELM_RELEASE (default=${common.helm-chart-name}-release)
  - HELM_TEST_TIMEOUT (default=5m0s)
  - HELM_VERSION (default="3.5.2")
  - K8_NAMESPACE (default=${common.helm-chart-name}-${var.commithash})
  - KUBECONFIG (default=${HOME}/.kube/config)
  - ZALLY_URL (default=http://10.45.204.215:8000/)

  # Credentials
  - DOCKER_CONFIG (default=$HOME/.docker/config.json)
  - ERIDOC_USERNAME
  - ERIDOC_PASSWORD
  - GERRIT_USERNAME
  - GERRIT_PASSWORD
  - GERRIT_CHANGE_NUMBER
  - HELM_REPO_API_TOKEN
  - JIRA_USERNAME
  - JIRA_PASSWORD
  - SELI_ARTIFACTORY_REPO_USER
  - SELI_ARTIFACTORY_REPO_PASS
  - SERO_ARTIFACTORY_REPO_USER
  - SERO_ARTIFACTORY_REPO_PASS

  # Default docker image tags
  - ASCII_DOC_BUILDER_TAG (default=latest)
  - DOC_BUILDER_TAG (default=2.3.0-latest)
  - ELIB_MAKE_UTILITIES_TAG (default=1.2.2)
  - HELM_DR_CHECK_TAG (default=latest)
  - HELM_KUBECTL_TAG (default=latest)
  - MVN_BUILDER_TAG (default=latest)
  - RELEASE_AUTO_TAG (default=latest)
  - ZALLY_CLIENT_TAG (default=0.0.2)

  # SonarQube
  - SONAR_AUTH_TOKEN
  - SONAR_HOST_URL
  - SONAR_BRANCH (default="master")

  # REST2HTML - Document Number of the REST Container file (The decimal class for a container is 190 89-)
  - REST2HTML_NUM (default="190 89-CAAH 101 091/1")

# Variables, set by below tasks
var:
  - commithash
  - commithash-full
  - commit-author
  - commit-email
  - docker-config-basepath
  - image-registry
  - helm-chart-repo-internal
  - image-full-name-internal
  - image-repopath-internal
  - pom-version
  - rest2html-optional
  - revision
  - rstate
  - version
  - version-prefix

# Rules to execute
rules:

  # Integrated rule to execute everything locally (init-dev)
  release:
    - rule: clean
    - rule: init-dev
    - rule: lint
    - rule: build
    - rule: test
    - rule: image
    - rule: package
    - rule: package-jars
    - rule: k8s-test

  # Clean workspace
  clean:
    - task: rm
      cmd:
        - rm -rf .bob/
        - rm -rf build/
        - git clean -xdf
    - task: mvn-clean
      docker-image: adp-maven-builder
      docker-flags: &mvn-docker-flags
        - ${env.DOCKER_NETWORK}
        - "--env MAVEN_OPTS=${env.MAVEN_OPTS}"
        - "--env HOME=${env.HOME}"
        - "--volume ${env.HOME}:${env.HOME}"
      cmd: mvn ${env.MAVEN_CLI_OPTS} clean

  # Common tasks for all init rules
  init-common:
    - task: version
      docker-image: adp-release-auto
      docker-flags:
        - "--env RELEASE"
      cmd: generate-version --is-release ${env.RELEASE} --output version
    - task: rstate
      docker-image: adp-release-auto
      cmd: get_rstate.py ${var.version} > .bob/var.rstate
    - task: commit
      docker-image: adp-release-auto
      cmd:
        - git rev-parse --short HEAD > .bob/var.commithash
        - git rev-parse HEAD > .bob/var.commithash-full
        - git log -1 --format='%aN' > .bob/var.commit-author
        - git log -1 --format='%aE' > .bob/var.commit-email
    - task: pom-version
      docker-image: adp-maven-builder
      docker-flags: *mvn-docker-flags
      cmd: mvn ${env.MAVEN_CLI_OPTS} help:evaluate -Dexpression=project.version -q -DforceStdout > .bob/var.pom-version

  # Dev Tasks: only used by manually publishing development/black builds by developers
  init-dev:
    - rule: init-common
    - task: preliminary-revision # For example: PA1
      cmd: RSTATE=${var.rstate} && echo P${RSTATE:2}1 > .bob/var.revision
    - task: image-repopath-internal
      cmd: echo "${image-dev-repopath}" | cut -f2- -d '/' > .bob/var.image-repopath-internal
    - task: image-registry
      cmd: echo "${image-dev-repopath}" | cut -f1 -d '/' > .bob/var.image-registry
    - task: image-full-name-internal
      cmd: echo "${image-dev-repopath}/${common.docker-image-name}" > .bob/var.image-full-name-internal
    - task: helm-chart-repo-internal
      cmd: echo "${helm-chart-dev-repopath}" > .bob/var.helm-chart-repo-internal

  # CI-Internal Tasks: used by CI to use as temporary storage for testing, only CI user has write access.
  init-precodereview:
    - rule: init-common
    - task: preliminary-revision # For example: PA1
      cmd: RSTATE=${var.rstate} && echo P${RSTATE:2}1 > .bob/var.revision
    - task: image-repopath-internal
      cmd: echo "${image-ci-repopath}" | cut -f2- -d '/' > .bob/var.image-repopath-internal
    - task: image-registry
      cmd: echo "${image-ci-repopath}" | cut -f1 -d '/' > .bob/var.image-registry
    - task: image-full-name-internal
      cmd: echo "${image-ci-repopath}/${common.docker-image-name}" > .bob/var.image-full-name-internal
    - task: helm-chart-repo-internal
      cmd: echo "${helm-chart-ci-repopath}" > .bob/var.helm-chart-repo-internal

  # Drop level tasks: used by CI to publish artifacts after successful CI pipeline execution for a drop build
  init-drop:
    - rule: init-common
    - task: full-revision # For example: A (Note: The Letters I O P Q R W must never be used for Document Revisioning.
      cmd:
        - RSTATE=${var.rstate} && echo ${RSTATE:2} > .bob/var.revision
        - echo -cpi > .bob/var.rest2html-optional
    - task: image-repopath-internal
      cmd: echo "${image-ci-repopath}" | cut -f2- -d '/' > .bob/var.image-repopath-internal
    - task: image-registry
      cmd: echo "${image-ci-repopath}" | cut -f1 -d '/' > .bob/var.image-registry
    - task: image-full-name-internal
      cmd: echo "${image-ci-repopath}/${common.docker-image-name}" > .bob/var.image-full-name-internal
    - task: helm-chart-repo-internal
      cmd: echo "${helm-chart-ci-repopath}" > .bob/var.helm-chart-repo-internal
    - task: adp-artifacts-properties
      docker-image: adp-release-auto
      cmd: generate-adp-artifacts
        --chart-name ${common.helm-chart-name}
        --chart-version ${var.version}
        --chart-repo ${helm-chart-drop-repo}
        --image-name ${common.docker-image-name}
        --image-version ${var.version}
        --image-repo "${var.image-registry}/${var.image-repopath-internal}"
    - task: write-git-details
      cmd:
        - echo "GIT_TAG=$(git log -1 --pretty=format:'%h')" >> artifact.properties
        - echo "GIT_COMMIT_AUTHOR=$(git log -1 --pretty=format:'%an')" >> artifact.properties
        - echo "GIT_COMMIT_SUMMARY=$(git log -1 --pretty=format:'%s')" >> artifact.properties

  lint:
    - task: markdownlint
      docker-image: adp-doc-builder
      cmd: bash -c 'markdownlint --config /etc/markdownlint-cli/adp.yaml $(git ls-files -- \*\.md | cat | xargs)' || true
    - task: vale
      docker-image: adp-doc-builder
      cmd: bash -c 'vale --output line --no-wrap $(git ls-files -- \*\.md | cat | xargs)' || true
    - task: helm
      docker-image: adp-helm-dr-check
      docker-flags:
        - "--env ENABLE_HELM_V3=true"
        - ${env.DOCKER_NETWORK}
      cmd: helm3 lint charts/${common.helm-chart-name}
    - task: helm-chart-check
      docker-image: adp-helm-dr-check
      cmd: helm-dr-check --helm-chart charts/${common.helm-chart-name} ${enabled-helm-design-rules} --helm-v3 --output .bob/
    - task: lint-api-schema
      docker-image: zally-client
      docker-flags:
        - "--env ZALLY_URL=${env.ZALLY_URL}"
        - ${env.DOCKER_NETWORK}
      cmd: lint src/main/resources/v1/datacalc-controller-poc-openapi.yaml > zally-api-lint-report.txt || true
    - task: license-check
      docker-image: adp-maven-builder
      docker-flags: *mvn-docker-flags
      cmd: mvn ${env.MAVEN_CLI_OPTS} license:check -DskipTests=true
    - task: checkstyle
      docker-image: adp-maven-builder
      docker-flags: *mvn-docker-flags
      cmd: mvn ${env.MAVEN_CLI_OPTS} checkstyle:check -DskipTests=true

  generate:
    - rule: rest-2-html
    - rule: generate-docs

  # Generate HTML output files from OpenAPI spec
  rest-2-html:
    - task: check-has-open-api-been-modified
      cmd:
        - if [ -z "$(git diff --name-status HEAD~ | grep src/main/resources/v1/datacalc-controller-poc-openapi.yaml)" ]; then
            echo "NO modifications have been made to the OpenAPI spec.";
            echo false > .bob/var.has-openapi-spec-been-modified;
          else
            echo "There HAS been modifications made to the OpenAPI spec.";
            echo true > .bob/var.has-openapi-spec-been-modified;
          fi
    - task: zip-open-api-doc
      docker-image: elib-make-utilities
      cmd:
        - ls -ltr src/main/resources/v1/
        - sh -c 'cd src/main/resources/v1/ && zip -r datacalc-controller-poc-openapi.zip datacalc-controller-poc-openapi.yaml'
        - ls -ltr src/main/resources/v1/
    - task: generate-html-output-files
      docker-image: elib-make-utilities
      cmd:
        - ls -ltr
        - /usr/src/elib/makerestc
           -inp src/main/resources/v1/datacalc-controller-poc-openapi.zip
           -oud .
           -rev ${var.revision}
           -inf ${var.commit-email}
           -num ${env.REST2HTML_NUM}
           -cre ${var.commit-author}
           -app ${var.commit-author}
           -d
           ${var.rest2html-optional}
        - ls -ltr
        - cat rest_conversion_log.txt

  # Generate documents: cpi sdifs and raml hml doc
  generate-docs:
    - task: asciidoc-to-sdif
      docker-image: adp-asciidoc-builder
      cmd: /adp_build_doc.sh --project-dir=${env.PWD} --build-dir=${env.PWD}/build
    - task: prepare-for-marketplace
      docker-image: adp-release-auto
      cmd:
        bash -c 'for i in $(find ./build/doc -maxdepth 1 ! -path ./build/doc -type d);
        do
        package_html.py -i $i/html -o $i/$(basename $i)_HTML.zip;
        done'

  # Build java source code and package jar file, no need image building at this stage
  build:
    - task: mvn-package
      docker-image: adp-maven-builder
      docker-flags: &mvn-docker-flags-with-creds
        - ${env.DOCKER_NETWORK}
        - "--env MAVEN_OPTS=${env.MAVEN_OPTS}"
        - "--env HOME=${env.HOME}"
        - "--volume ${env.HOME}:${env.HOME}"
        - "--volume /etc/passwd:/etc/passwd:ro"
        - "--env SELI_ARTIFACTORY_REPO_USER"
        - "--env SELI_ARTIFACTORY_REPO_PASS"
      cmd: mvn ${env.MAVEN_CLI_OPTS} clean install -DskipTests=true

  # Run unit tests and jacoco coverage for SonarQube analysis
  test:
    - task: mvn-package
      docker-image: adp-maven-builder
      docker-flags: *mvn-docker-flags-with-creds
      cmd: mvn ${env.MAVEN_CLI_OPTS} clean install jacoco:prepare-agent

  sonar-enterprise-pcr:
    - task: generate-version-prefix
      cmd: cat VERSION_PREFIX > .bob/var.version-prefix
    - task: mvn-sonar-enterprise-sonarqube-analysis
      docker-image: adp-maven-builder
      docker-flags: *mvn-docker-flags-with-creds
      cmd: mvn ${env.MAVEN_CLI_OPTS} sonar:sonar
        -Dsonar.login=${env.SONAR_AUTH_TOKEN}
        -Dsonar.host.url=${env.SONAR_HOST_URL}
        -Dsonar.branch.name=${var.version-prefix}-${env.GERRIT_CHANGE_NUMBER}
        -Dsonar.branch.target=${env.SONAR_BRANCH}

  sonar-enterprise-release:
    - task: sonarqube-analysis
      docker-image: adp-maven-builder
      docker-flags: *mvn-docker-flags-with-creds
      cmd: mvn ${env.MAVEN_CLI_OPTS} sonar:sonar
        -Dsonar.login=${env.SONAR_AUTH_TOKEN}
        -Dsonar.host.url=${env.SONAR_HOST_URL}
        -Dsonar.projectVersion=${var.version}

  # Build a docker image pointing to dirty repository
  image:
    - task: docker-build
      cmd: docker build ${env.PWD} ${env.DOCKER_NETWORK}
        --file Dockerfile
        --tag ${var.image-full-name-internal}:${var.version}
        --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
        --build-arg COMMIT=${var.commithash}
        --build-arg APP_VERSION=${var.version}
        --build-arg JAR_FILE=datacalc-controller-poc-${var.pom-version}.jar

  # Check for image design rule compliance
  image-dr-check:
    - task: check-image-dr
      docker-image: image-dr-check
      docker-in-docker: socket
      cmd: "image-dr-check
          --image ${var.image-full-name-internal}:${var.version}
          --output .bob/check-image/
          ${enabled-image-design-rules}"

  # Push image to ci-internal repo and create local version of helm chart
  package-local:
    - task: image-push-internal
      cmd: docker push ${var.image-full-name-internal}:${var.version}
    - task: package-helm-internal
      docker-image: adp-release-auto
      docker-flags:
        - ${env.DOCKER_NETWORK}
        - "--env ENABLE_HELM_V3=true"
      cmd: helm-package
        --folder charts/${common.helm-chart-name}
        --workdir .bob --output .bob/${common.helm-chart-name}-internal
        --version ${var.version}
        --replace VERSION=${var.version}
        --replace RSTATE=${var.rstate}
        --replace REPO_PATH=${var.image-repopath-internal}
        --replace IMAGE_NAME=${common.docker-image-name}
        --replace REPO_URL=${var.image-registry}

  # Push image to ci-internal repo, create internal version of helm chart and pushes it to internal repo
  package:
    - rule: package-local
    - task: helm-upload-internal
      docker-image: adp-release-auto
      docker-flags:
        - ${env.DOCKER_NETWORK}
        - "--env ENABLE_HELM_V3=true"
      cmd: upload_file.sh
        --filename=.bob/${common.helm-chart-name}-internal/${common.helm-chart-name}-${var.version}.tgz
        --repository=${var.helm-chart-repo-internal}/${common.helm-chart-name}
        --api-token="${env.HELM_REPO_API_TOKEN}"

  package-jars:
    - task: mvn-upload-internal
      docker-image: adp-maven-builder
      docker-flags: *mvn-docker-flags-with-creds
      cmd: mvn ${env.MAVEN_CLI_OPTS} clean deploy

  k8s-test:
    - rule: helm-dry-run
    - rule: create-namespace
    - rule: setup-secrets
    - rule: helm-install
    - rule: healthcheck
    - rule: helm-test
    - rule: delete-namespace

  helm-dry-run:
    - task: find-docker-config-basepath
      cmd: dirname ${env.DOCKER_CONFIG} > .bob/var.docker-config-basepath
    - task: helm-dry-run
      docker-image: adp-helm-kubectl
      docker-flags: &docker_flags_kube_config
        - ${env.DOCKER_NETWORK}
        - "--env HOME=${env.HOME}"
        - "--env K8_NAMESPACE=${env.K8_NAMESPACE}"
        - "--env KUBECONFIG=${env.KUBECONFIG}"
        - "--env ENABLE_HELM_V3"
        - "--env HELM_VERSION"
        - "--env SELI_ARTIFACTORY_REPO_USER"
        - "--env SELI_ARTIFACTORY_REPO_PASS"
        - "--env COLLECT_LOGS_SCRIPT_LOCATION"
        - "--volume ${env.PWD}:${env.PWD}"
        - "--volume ${env.HOME}:${env.HOME}"
        - "--volume ${env.KUBECONFIG}:${env.KUBECONFIG}"
        - "--volume ${var.docker-config-basepath}:${var.docker-config-basepath}"
      cmd: helm install .bob/${common.helm-chart-name}-internal/${common.helm-chart-name}-${var.version}.tgz
        --dry-run
        --debug
        --generate-name
        > helm-install-dry-run.log

  create-namespace:
    - task: find-docker-config-basepath
      cmd: dirname ${env.DOCKER_CONFIG} > .bob/var.docker-config-basepath
    - task: create-namespace
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd: kubectl create namespace ${env.K8_NAMESPACE}

  setup-secrets:
    - task: find-docker-config-basepath
      cmd: dirname ${env.DOCKER_CONFIG} > .bob/var.docker-config-basepath
    - task: create-namespace-if-not-exists
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd: kubectl create namespace ${env.K8_NAMESPACE} || true
    - task: setup-secrets
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd: kubectl create secret generic ${image-secret}
        --from-file=.dockerconfigjson=${env.DOCKER_CONFIG}
        --type=kubernetes.io/dockerconfigjson
        --namespace ${env.K8_NAMESPACE} || true

  helm-install:
    - rule: setup-secrets
    - task: find-docker-config-basepath
      cmd: dirname ${env.DOCKER_CONFIG} > .bob/var.docker-config-basepath
    - task: install-on-kubernetes
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd: helm install ${env.HELM_RELEASE} .bob/${common.helm-chart-name}-internal/${common.helm-chart-name}-${var.version}.tgz
        --namespace ${env.K8_NAMESPACE}
        --set eric-log-shipper.logshipper.autodiscover.namespace=${env.K8_NAMESPACE}
        --set imageCredentials.datacalc-controller-poc.pullSecret=${image-secret}
        --set global.registry.url=${var.image-registry}
        --timeout ${env.HELM_INSTALL_TIMEOUT}
        --wait

  healthcheck:
    - task: find-docker-config-basepath
      cmd: dirname ${env.DOCKER_CONFIG} > .bob/var.docker-config-basepath
    - task: healthcheck
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd: ./healthcheck.sh

  helm-test:
    - rule: setup-secrets
    - task: find-docker-config-basepath
      cmd: dirname ${env.DOCKER_CONFIG} > .bob/var.docker-config-basepath
    - task: install-on-kubernetes
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd: helm test ${env.HELM_RELEASE}
        --namespace ${env.K8_NAMESPACE}
        --timeout ${env.HELM_TEST_TIMEOUT}

  delete-namespace:
    - task: find-docker-config-basepath
      cmd: dirname ${env.DOCKER_CONFIG} > .bob/var.docker-config-basepath
    - task: delete-release
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd: helm delete ${env.HELM_RELEASE} --namespace ${env.K8_NAMESPACE}
    - task: delete-namespace
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd: kubectl delete namespace ${env.K8_NAMESPACE}

  # Publish docker images and helm charts to drop repository
  # Call publish only when merged to master
  publish:
    - task: package-helm-public
      docker-image: adp-release-auto
      docker-flags:
        - ${env.DOCKER_NETWORK}
        - "--env ENABLE_HELM_V3=true"
      cmd: helm-package
        --folder charts/${common.helm-chart-name}
        --workdir .bob --output build
        --version ${var.version}
        --replace VERSION=${var.version}
        --replace REPO_PATH=${image-full-name}
        --replace RSTATE=${var.rstate}
        --replace REPO_URL=${var.image-registry}
    - task: image-pull-internal
      cmd: docker pull ${var.image-full-name-internal}:${var.version}
    - task: image-tag-public
      cmd: docker tag ${var.image-full-name-internal}:${var.version} ${image-full-name}:${var.version}
    - task: image-push-public
      cmd: docker push ${image-full-name}:${var.version}
    - task: git-tag
      cmd:
        - git tag -af ${var.version} -m "Release ${var.version}"
        - git remote set-url origin ${git-repo-url}
        - git push origin ${var.version} || true
    - task: helm-upload
      docker-image: adp-release-auto
      docker-flags:
        - ${env.DOCKER_NETWORK}
        - "--env ENABLE_HELM_V3=true"
      cmd: upload_file.sh
        --filename=build/${common.helm-chart-name}-${var.version}.tgz
        --repository=${helm-chart-drop-repo}/${common.helm-chart-name}
        --api-token="${env.HELM_REPO_API_TOKEN}"

  publish-jars:
    - task: git-tag
      docker-image: adp-maven-builder
      docker-flags:
        - "-v /etc/passwd:/etc/passwd:ro"
        - "--volume ${env.HOME}:${env.HOME}"
        - ${env.DOCKER_NETWORK}
      cmd:
        - git config --local user.email ${git-user}@ericsson.com
        - git config --local user.name ${git-user}
        - git checkout master
    - task: mvn-upload
      docker-image: adp-maven-builder
      docker-flags:
        - "-v /etc/passwd:/etc/passwd:ro"
        - "--volume /etc/ssh:/etc/ssh"
        - "--volume ${env.HOME}:${env.HOME}"
        - ${env.DOCKER_NETWORK}
        - "--env SELI_ARTIFACTORY_REPO_USER"
        - "--env SELI_ARTIFACTORY_REPO_PASS"
        - "--env MAVEN_OPTS"
      cmd: mvn ${env.MAVEN_CLI_OPTS} -Darguments=" -Dgoals=clean deploy -Dmaven.javadoc.skip=true" release:prepare release:perform

  helm-chart-check-report-warnings:
    - task: helm-chart-check-report-warnings
      cmd:
        - if grep -q ">WARNING<" .bob/design-rule-check-report.xml; then
            echo true > .bob/var.helm-chart-check-report-warnings;
          else
            echo false > .bob/var.helm-chart-check-report-warnings;
          fi

  collect-k8s-logs:
    - task: collect-logs-using-script
      docker-image: adp-helm-kubectl
      docker-flags:
        - ${env.DOCKER_NETWORK}
        - "--env ENABLE_HELM_V3"
        - "--env HELM_VERSION"
        - "--env SERO_ARTIFACTORY_REPO_USER"
        - "--env SERO_ARTIFACTORY_REPO_PASS"
        - "--env COLLECT_LOGS_SCRIPT_LOCATION"
        - "--env COLLECT_LOGS_SCRIPT_FILE_NAME"
        - "--env COLLECT_LOGS_SINCE_RELATIVE_TIME"
        - "--env COLLECT_LOGS_DIR"
        - "--env HOME=${env.HOME}"
        - "--volume ${env.HOME}:${env.HOME}"
      cmd:
        - mkdir -p ${env.COLLECT_LOGS_DIR}
        - kubectl config view > ${env.COLLECT_LOGS_DIR}/kubectl.config
        - kubectl get ns > ${env.COLLECT_LOGS_DIR}/kubectl-get-ns.log
        - helm ls -Aa > ${env.COLLECT_LOGS_DIR}/helm-ls-Aa.log
        - printenv | grep -v CREDENTIALS | grep -v ARTIFACTORY > ${env.COLLECT_LOGS_DIR}/printenv.log
        - curl -u ${env.SERO_ARTIFACTORY_REPO_USER}:${env.SERO_ARTIFACTORY_REPO_PASS} ${env.COLLECT_LOGS_SCRIPT_LOCATION}/${env.COLLECT_LOGS_SCRIPT_FILE_NAME} > ${env.COLLECT_LOGS_DIR}/${env.COLLECT_LOGS_SCRIPT_FILE_NAME}
        - chmod 777 ${env.COLLECT_LOGS_DIR}/${env.COLLECT_LOGS_SCRIPT_FILE_NAME}
        - sh -c "cd ${env.COLLECT_LOGS_DIR} && ./${env.COLLECT_LOGS_SCRIPT_FILE_NAME} ${env.K8_NAMESPACE} ${env.COLLECT_LOGS_SINCE_RELATIVE_TIME}"

  ######################
  #### UNUSED RULES ####
  ######################
  # Not being executed since the following is logged: The requested profile "runContractTests" could not be activated because it does not exist.
  contract-tests:
    - task: mvn-contract-tests
      docker-image: adp-maven-builder
      docker-flags: *mvn-docker-flags-with-creds
      cmd: mvn ${env.MAVEN_CLI_OPTS} clean install
        -PrunContractTests
        -Djacoco.skip=true

  system-test:
    - task: find-docker-config-basepath
      cmd: dirname ${env.DOCKER_CONFIG} > .bob/var.docker-config-basepath
    - task: system-test
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd: ./deployAndUpgrade.py
        --kubernetes-admin-conf=${env.KUBECONFIG}
        --kubernetes-namespace=${env.K8_NAMESPACE}
        --chart-archive=.bob/${common.helm-chart-name}-internal/${common.helm-chart-name}-${var.version}.tgz
        --helm-repo=${helm-chart-drop-repo}
        --baseline_chart_version=1.0.0-53
        --armdocker-config-json=${env.DOCKER_CONFIG}
        --helm-v3

  evms-csv-generation:
    - task: evms-registration
      docker-image: adp-release-auto
      cmd: dependencies generate --evms
        --format csv
        --evms-product-name 'Catfacts Text Analyzer 1.x'
        --evms-product-version ${var.version}
        -out ./
        --dependencies ci_config/dependencies.yaml

  # Dryrun eridoc upload
  eridoc-dryrun:
    # Check if eridoc_config.yaml is OK
    - task: dryrun
      docker-image: adp-release-auto
      docker-flags:
        - "--env ERIDOC_USERNAME"
        - "--env ERIDOC_PASSWORD"
        - ${env.DOCKER_NETWORK}
      cmd: eridoc upload --config ./ci_config/eridoc_config.yaml --debug --no-validate-certificates --dry-run

  # Upload eridoc documents to Eridoc
  eridoc-upload:
    # Check if eridoc_config.yaml is OK
    - task: eridoc-upload
      docker-image: adp-release-auto
      docker-flags:
        - "--env ERIDOC_USERNAME"
        - "--env ERIDOC_PASSWORD"
        - ${env.DOCKER_NETWORK}
      cmd: eridoc upload --config ./ci_config/eridoc_config.yaml --debug --no-validate-certificates

  # Approve uploaded documents in Eridoc
  eridoc-approve:
    # Check if eridoc_config.yaml is OK
    - task: eridoc-approve
      docker-image: adp-release-auto
      docker-flags:
        - "--env ERIDOC_USERNAME"
        - "--env ERIDOC_PASSWORD"
        - ${env.DOCKER_NETWORK}
      cmd: eridoc approve --config ./ci_config/eridoc_config.yaml --debug --no-validate-certificates
